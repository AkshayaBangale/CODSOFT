#include <iostream>
#include <vector>
#include <algorithm>

struct Task {
    std::string description;
    bool completed;
};
void displayMenu();
void addTask(std::vector<Task>& tasks);
void viewTasks(const std::vector<Task>& tasks);
void markTaskAsCompleted(std::vector<Task>& tasks);
void removeTask(std::vector<Task>& tasks);

int main() {
    std::vector<Task> tasks;

    int choice;

    do {
        displayMenu();
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case 1:
                addTask(tasks);
                break;
            case 2:
                viewTasks(tasks);
                break;
            case 3:
                markTaskAsCompleted(tasks);
                break;
            case 4:
                removeTask(tasks);
                break;
            case 5:
                std::cout << "Exiting the program. Goodbye!\n";
                break;
            default:
                std::cout << "Invalid choice. Please try again.\n";
        }

    } while (choice != 5);

    return 0;
}

void displayMenu() {
    std::cout << "\nTODO LIST MANAGER\n";
    std::cout << "1. Add Task\n";
    std::cout << "2. View Tasks\n";
    std::cout << "3. Mark Task as Completed\n";
    std::cout << "4. Remove Task\n";
    std::cout << "5. Exit\n";
}

void addTask(std::vector<Task>& tasks) {
    Task newTask;
    std::cin.ignore(); 
    std::cout << "Enter task description: ";
    std::getline(std::cin, newTask.description);
    newTask.completed = false;

    tasks.push_back(newTask);

    std::cout << "Task added successfully!\n";
}

void viewTasks(const std::vector<Task>& tasks) {
    if (tasks.empty()) {
        std::cout << "No tasks available.\n";
    } else {
        std::cout << "\nTASKS:\n";
        for (size_t i = 0; i < tasks.size(); ++i) {
            std::cout << i + 1 << ". " << (tasks[i].completed ? "[X] " : "[ ] ") << tasks[i].description << "\n";
        }
    }
}

void markTaskAsCompleted(std::vector<Task>& tasks) {
    viewTasks(tasks);

    if (tasks.empty()) {
        std::cout << "No tasks to mark as completed.\n";
        return;
    }

    int index;
    std::cout << "Enter the task number to mark as completed: ";
    std::cin >> index;

    if (index >= 1 && static_cast<size_t>(index) <= tasks.size()) {
        tasks[index - 1].completed = true;
        std::cout << "Task marked as completed!\n";
    } else {
        std::cout << "Invalid task number. Please try again.\n";
    }
}

void removeTask(std::vector<Task>& tasks) {
    viewTasks(tasks);

    if (tasks.empty()) {
        std::cout << "No tasks to remove.\n";
        return;
    }

    int index;
    std::cout << "Enter the task number to remove: ";
    std::cin >> index;

    if (index >= 1 && static_cast<size_t>(index) <= tasks.size()) {
        tasks.erase(tasks.begin() + index - 1);
        std::cout << "Task removed successfully!\n";
    } else {
        std::cout << "Invalid task number. Please try again.\n";
    }
}